generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id Int @id @default(autoincrement())

  formattedImageName String
  formattedImageURL  String
  originalImageName  String
  originalImageURL   String
  avifImageName      String
  avifImageURL       String
  smallImageName     String
  smallImageURL      String
  mediumImageName    String
  mediumImageURL     String
  largeImageName     String
  largeImageURL      String

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Artiste     Artiste[]
  MusicAlbum  MusicAlbum[]
  ArtistGroup ArtistGroup[]
}

model Sound {
  id       Int @id @default(autoincrement())
  duration Int

  originalSoundName String
  originalSoundURL  String
  wavSoundName      String
  wavSoundURL       String
  m4aSoundName      String
  m4aSoundURL       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Track     Track[]
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String

  PlaylistMusic PlaylistMusic[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Artiste {
  id   Int    @id @default(autoincrement())
  name String

  image   Image? @relation(fields: [imageId], references: [id])
  imageId Int?

  artistGroupId Int?
  artistGroup   ArtistGroup? @relation(fields: [artistGroupId], references: [id])

  MusicAlbum MusicAlbum[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MusicAlbum {
  id    Int    @id @default(autoincrement())
  title String

  image   Image? @relation(fields: [imageId], references: [id])
  imageId Int?

  artisteId Int?
  artiste   Artiste?     @relation(fields: [artisteId], references: [id])
  groupId   Int?
  group     ArtistGroup? @relation(fields: [groupId], references: [id])
  Track     Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id    Int    @id @default(autoincrement())
  title String

  soundId         Int?
  sound           Sound?         @relation(fields: [soundId], references: [id])
  albumId         Int
  album           MusicAlbum     @relation(fields: [albumId], references: [id])
  PlaylistMusic   PlaylistMusic? @relation(fields: [playlistMusicId], references: [id])
  playlistMusicId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlaylistMusic {
  id    Int    @id @default(autoincrement())
  title String

  Tracks Track[]

  userId Int
  user   User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ArtistGroup {
  id    Int    @id @default(autoincrement())
  title String

  imageId Int?
  image   Image? @relation(fields: [imageId], references: [id])

  artists Artiste[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  MusicAlbum MusicAlbum[]
}
