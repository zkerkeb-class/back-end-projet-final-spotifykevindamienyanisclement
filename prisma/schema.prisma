generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id Int @id @default(autoincrement())

  originalImageName  String
  originalImageURL   String
  formattedImageName String
  formattedImageURL  String
  avifImageName      String
  avifImageURL       String
  smallImageName     String
  smallImageURL      String
  mediumImageName    String
  mediumImageURL     String
  largeImageName     String
  largeImageURL      String

  artists   artist[]
  albums    Album[]
  groups    Group[]
  playlists Playlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sound {
  id       Int @id @default(autoincrement())
  duration Int

  originalSoundName String
  originalSoundURL  String
  wavSoundName      String
  wavSoundURL       String
  m4aSoundName      String
  m4aSoundURL       String

  tracks Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String?
  password String
  role     Role    @default(USER) // USER | ADMIN

  playlists Playlist[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  AuditLog  AuditLog[]
}

model artist {
  id   Int    @id @default(autoincrement())
  name String

  image   Image? @relation(fields: [imageId], references: [id])
  imageId Int?

  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])

  albums Album[]
  tracks Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Album {
  id    Int    @id @default(autoincrement())
  title String

  image   Image? @relation(fields: [imageId], references: [id])
  imageId Int?

  artistId Int?
  artist   artist? @relation(fields: [artistId], references: [id])

  groupId Int?
  group   Group? @relation(fields: [groupId], references: [id])

  tracks Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Track {
  id    Int    @id @default(autoincrement())
  title String

  soundId Int?
  sound   Sound? @relation(fields: [soundId], references: [id])

  albumId Int
  album   Album @relation(fields: [albumId], references: [id])

  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId Int?

  artist   artist? @relation(fields: [artistId], references: [id])
  artistId Int?
  groupId  Int?
  group    Group?  @relation(fields: [groupId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Playlist {
  id    Int    @id @default(autoincrement())
  title String

  imageId Int?
  image   Image?  @relation(fields: [imageId], references: [id])
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
  tracks  Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id   Int    @id @default(autoincrement())
  name String

  imageId Int?
  image   Image? @relation(fields: [imageId], references: [id])

  artists artist[]
  albums  Album[]
  Track   Track[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  userId     Int
  action     String
  resource   String
  resourceId Int?
  details    String   @db.Text
  ipAddress  String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
}
